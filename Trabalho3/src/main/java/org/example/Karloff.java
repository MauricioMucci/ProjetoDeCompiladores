/* Karloff.java */
/* Generated By:JavaCC: Do not edit this line. Karloff.java */
import java.io.*;
public class Karloff implements KarloffConstants {

  public static void main(String args[]) throws ParseException, IOException {

 Karloff analisador = new Karloff(new FileInputStream(args[0]));
 analisador.Karloff();
  }

// KARLOFF → MAIN FUNC?
  static final public void Karloff() throws ParseException {
    Main();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FUNC:{
      Func();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(0);
}

// MAIN → "void" "main" "(" ")" "{" VARDECL SEQCOMANDOS "}"
  static final public void Main() throws ParseException {
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(APARENTESES);
    jj_consume_token(FPARENTESES);
    jj_consume_token(ACHAVES);
    Vardecl();
    SeqComandos();
    jj_consume_token(FCHAVES);
}

// VARDECL →  VARDECL’
  static final public void Vardecl() throws ParseException {
    Vardecl_();
}

// VARDECL’ → "newVar" TIPO TOKEN_id ";" VARDECL’ | vazio
  static final public void Vardecl_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEWVAR:{
      jj_consume_token(NEWVAR);
      Tipo();
      jj_consume_token(ID);
      jj_consume_token(PONTOVIRGULA);
      Vardecl_();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
}

// TIPO → "integer" | "bool"
  static final public void Tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEIRO:{
      jj_consume_token(INTEIRO);
      break;
      }
    case BOOLEANO:{
      jj_consume_token(BOOLEANO);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// SEQCOMANDOS → SEQCOMANDOS’
  static final public void SeqComandos() throws ParseException {
    SeqComandos_();
}

// SEQCOMANDOS’ → COMANDO SEQCOMANDOS’ | vazio
  static final public void SeqComandos_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:
    case WHILE:
    case REPEAT:
    case RETURN:
    case SOUT:
    case ID:{
      Comando();
      SeqComandos_();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
}

// COMANDO → TOKEN_id COMANDO’
// | "if" "(" EXP ")" "then" "{" SEQCOMANDOS "}"  ";"
// | "while" "(" EXP ")" "{" SEQCOMANDOS "}"  ";"
// | "repeat" "{" SEQCOMANDOS "}" "until" "(" EXP ")"  ";"
// | "return" EXP  ";"
// | "System.output" "(" EXP ")"  ";"
  static final public void Comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      Comando_();
      break;
      }
    case IF:{
      jj_consume_token(IF);
      jj_consume_token(APARENTESES);
      Exp();
      jj_consume_token(FPARENTESES);
      jj_consume_token(THEN);
      jj_consume_token(ACHAVES);
      SeqComandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(PONTOVIRGULA);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      jj_consume_token(APARENTESES);
      Exp();
      jj_consume_token(FPARENTESES);
      jj_consume_token(ACHAVES);
      SeqComandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(PONTOVIRGULA);
      break;
      }
    case REPEAT:{
      jj_consume_token(REPEAT);
      jj_consume_token(ACHAVES);
      SeqComandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(UNTIL);
      jj_consume_token(APARENTESES);
      Exp();
      jj_consume_token(FPARENTESES);
      jj_consume_token(PONTOVIRGULA);
      break;
      }
    case RETURN:{
      jj_consume_token(RETURN);
      Exp();
      jj_consume_token(PONTOVIRGULA);
      break;
      }
    case SOUT:{
      jj_consume_token(SOUT);
      jj_consume_token(APARENTESES);
      Exp();
      jj_consume_token(FPARENTESES);
      jj_consume_token(PONTOVIRGULA);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// COMANDO’ → "=" COMANDO’’ | "(" LISTAEXP? ")"  ";"
  static final public void Comando_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ATRIB:{
      jj_consume_token(ATRIB);
      Comando__();
      break;
      }
    case APARENTESES:{
      jj_consume_token(APARENTESES);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case APARENTESES:
      case TRUE:
      case FALSE:
      case NUM:
      case ID:{
        ListaExp();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(FPARENTESES);
      jj_consume_token(PONTOVIRGULA);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// COMANDO’’ → EXP ";" | "System.readint" "(" ")" ";"
  static final public void Comando__() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case APARENTESES:
    case TRUE:
    case FALSE:
    case NUM:
    case ID:{
      Exp();
      jj_consume_token(PONTOVIRGULA);
      break;
      }
    case SREADINT:{
      jj_consume_token(SREADINT);
      jj_consume_token(APARENTESES);
      jj_consume_token(FPARENTESES);
      jj_consume_token(PONTOVIRGULA);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//EXP →  "(" EXP OP EXP ")" | FATOR
  static final public void Exp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case APARENTESES:{
      jj_consume_token(APARENTESES);
      Exp();
      Op();
      Exp();
      jj_consume_token(FPARENTESES);
      break;
      }
    case TRUE:
    case FALSE:
    case NUM:
    case ID:{
      Fator();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//FATOR →  TOKEN_id FATOR’| TOKEN_numliteral | "true" | "false"
  static final public void Fator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      Fator_();
      break;
      }
    case NUM:{
      jj_consume_token(NUM);
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//FATOR’ →  "(" LISTAEXP? ")" | vazio
  static final public void Fator_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case APARENTESES:{
      jj_consume_token(APARENTESES);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case APARENTESES:
      case TRUE:
      case FALSE:
      case NUM:
      case ID:{
        ListaExp();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(FPARENTESES);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
}

//OP →  "+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "=="
  static final public void Op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SOMA:{
      jj_consume_token(SOMA);
      break;
      }
    case SUB:{
      jj_consume_token(SUB);
      break;
      }
    case MULT:{
      jj_consume_token(MULT);
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
      break;
      }
    case AND:{
      jj_consume_token(AND);
      break;
      }
    case OR:{
      jj_consume_token(OR);
      break;
      }
    case MENOR:{
      jj_consume_token(MENOR);
      break;
      }
    case MAIOR:{
      jj_consume_token(MAIOR);
      break;
      }
    case IGUAL:{
      jj_consume_token(IGUAL);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//LISTAEXP → EXP LISTAEXP’
  static final public void ListaExp() throws ParseException {
    Exp();
    ListaExp_();
}

//LISTAEXP’ → "," EXP  LISTAEXP’ | vazio
  static final public void ListaExp_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VIRGULA:{
      jj_consume_token(VIRGULA);
      Exp();
      ListaExp_();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
}

//FUNC → "func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"  FUNC’
  static final public void Func() throws ParseException {
    jj_consume_token(FUNC);
    Tipo();
    jj_consume_token(ID);
    jj_consume_token(APARENTESES);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEIRO:
    case BOOLEANO:{
      ListaArg();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(FPARENTESES);
    jj_consume_token(ACHAVES);
    Vardecl();
    SeqComandos();
    jj_consume_token(FCHAVES);
    Func_();
}

//FUNC’ → “func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"  FUNC’ | vazio
  static final public void Func_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FUNC:{
      jj_consume_token(FUNC);
      Tipo();
      jj_consume_token(ID);
      jj_consume_token(APARENTESES);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEIRO:
      case BOOLEANO:{
        ListaArg();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(FPARENTESES);
      jj_consume_token(ACHAVES);
      Vardecl();
      SeqComandos();
      jj_consume_token(FCHAVES);
      Func_();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
}

//LISTAARG → TIPO TOKEN_id LISTAARG’
  static final public void ListaArg() throws ParseException {
    Tipo();
    jj_consume_token(ID);
    ListaArg_();
}

//LISTAARG’ → "," TIPO TOKEN_id LISTAARG’ | vazio
  static final public void ListaArg_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VIRGULA:{
      jj_consume_token(VIRGULA);
      Tipo();
      jj_consume_token(ID);
      ListaArg_();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public KarloffTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x800,0x6000,0x6d0000,0x6d0000,0x3000200,0x8200,0x3800200,0x3000200,0x3000000,0x3000200,0x200,0xfc000000,0x0,0x6000,0x6000,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x10,0x0,0x0,0x40,0x40,0x60,0x0,0x60,0x60,0x60,0x60,0x0,0x7,0x8,0x0,0x0,0x10,0x8,};
	}

  /** Constructor with InputStream. */
  public Karloff(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Karloff(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new KarloffTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Karloff(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new KarloffTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new KarloffTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Karloff(KarloffTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(KarloffTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[39];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 18; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 39; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

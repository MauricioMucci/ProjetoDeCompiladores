PARSER_BEGIN(Karloff)
import java.io.*;
public class Karloff {

  public static void main(String args[]) throws ParseException, IOException {

 Karloff analisador = new Karloff(new FileInputStream(args[0]));
 analisador.Karloff();
  }

}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <VOID: "void">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <NEWVAR: "newVar">
| <PONTOVIRGULA: ";">
| <INTEIRO: "integer">
| <BOOLEANO: "bool">
| <ATRIB: "=">
| <IF: "if">
| <THEN: "then">
| <WHILE: "while">
| <REPEAT: "repeat">
| <UNTIL: "until">
| <RETURN: "return">
| <SOUT: "System.output">
| <SREADINT: "System.readint">
| <TRUE: "true">
| <FALSE: "false">
| <SOMA: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">
| <AND: "&">
| <OR: "|">
| <MENOR: "<">
| <MAIOR: ">">
| <IGUAL: "==">
| <VIRGULA: ",">
| <FUNC: "func">
}

TOKEN :
{
  <NUM : (["0"-"9"])+>
 |< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>

}

// KARLOFF → MAIN FUNC?
void Karloff () :
{}
{
Main() (Func())?
<EOF>
}

// MAIN → "void" "main" "(" ")" "{" VARDECL SEQCOMANDOS "}"
void Main () :
{}
{
<VOID> <MAIN> <APARENTESES> <FPARENTESES> <ACHAVES> Vardecl() SeqComandos() <FCHAVES>
}

// VARDECL →  VARDECL’
void Vardecl () :
{}
{
Vardecl_()
}

// VARDECL’ → "newVar" TIPO TOKEN_id ";" VARDECL’ | vazio
void Vardecl_ () :
{}
{
 (<NEWVAR> Tipo() <ID> <PONTOVIRGULA> Vardecl_())?
}

// TIPO → "integer" | "bool"
void Tipo () :
{}
{
<INTEIRO> | <BOOLEANO>
}

// SEQCOMANDOS → SEQCOMANDOS’
void SeqComandos () :
{}
{
SeqComandos_()
}

// SEQCOMANDOS’ → COMANDO SEQCOMANDOS’ | vazio
void SeqComandos_ () :
{}
{
(Comando() SeqComandos_())?
}


// COMANDO → TOKEN_id COMANDO’
// | "if" "(" EXP ")" "then" "{" SEQCOMANDOS "}"  ";"
// | "while" "(" EXP ")" "{" SEQCOMANDOS "}"  ";"
// | "repeat" "{" SEQCOMANDOS "}" "until" "(" EXP ")"  ";"
// | "return" EXP  ";"
// | "System.output" "(" EXP ")"  ";"
void Comando () :
{}
{
(<ID> Comando_())
| (<IF> <APARENTESES> Exp() <FPARENTESES> <THEN> <ACHAVES> SeqComandos() <FCHAVES> <PONTOVIRGULA>)
| (<WHILE> <APARENTESES> Exp() <FPARENTESES> <ACHAVES> SeqComandos() <FCHAVES> <PONTOVIRGULA>)
| (<REPEAT> <ACHAVES> SeqComandos() <FCHAVES> <UNTIL> <APARENTESES> Exp() <FPARENTESES> <PONTOVIRGULA>)
| (<RETURN> Exp() <PONTOVIRGULA>)
| (<SOUT> <APARENTESES> Exp() <FPARENTESES> <PONTOVIRGULA>)
}

// COMANDO’ → "=" COMANDO’’ | "(" LISTAEXP? ")"  ";"
void Comando_ () :
{}
{
(<ATRIB> Comando__())
| (<APARENTESES> (ListaExp())? <FPARENTESES> <PONTOVIRGULA>)
}

// COMANDO’’ → EXP ";" | "System.readint" "(" ")" ";"
void Comando__ () :
{}
{
(Exp() <PONTOVIRGULA>)
| (<SREADINT> <APARENTESES> <FPARENTESES> <PONTOVIRGULA>)
}

//EXP →  "(" EXP OP EXP ")" | FATOR
void Exp () :
{}
{
(<APARENTESES> Exp() Op() Exp() <FPARENTESES>)
| Fator()
}

//FATOR →  TOKEN_id FATOR’| TOKEN_numliteral | "true" | "false"
void Fator () :
{}
{
(<ID> Fator_()) | <NUM> | <TRUE> | <FALSE>
}

//FATOR’ →  "(" LISTAEXP? ")" | vazio
void Fator_ () :
{}
{
(<APARENTESES> (ListaExp())? <FPARENTESES>)?
}

//OP →  "+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "=="
void Op () :
{}
{
<SOMA> | <SUB> | <MULT> | <DIV> | <AND> | <OR> | <MENOR> | <MAIOR> | <IGUAL>
}

//LISTAEXP → EXP LISTAEXP’
void ListaExp () :
{}
{
Exp() ListaExp_()
}

//LISTAEXP’ → "," EXP  LISTAEXP’ | vazio
void ListaExp_ () :
{}
{
(<VIRGULA> Exp() ListaExp_())?
}

//FUNC → "func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"  FUNC’
void Func () :
{}
{
<FUNC> Tipo() <ID> <APARENTESES> (ListaArg())? <FPARENTESES> <ACHAVES> Vardecl() SeqComandos() <FCHAVES> Func_()
}

//FUNC’ → “func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"  FUNC’ | vazio
void Func_ () :
{}
{
(<FUNC> Tipo() <ID> <APARENTESES> (ListaArg())? <FPARENTESES> <ACHAVES> Vardecl() SeqComandos() <FCHAVES> Func_() )?
}

//LISTAARG → TIPO TOKEN_id LISTAARG’
void ListaArg () :
{}
{
Tipo() <ID> ListaArg_()
}

//LISTAARG’ → "," TIPO TOKEN_id LISTAARG’ | vazio
void ListaArg_ () :
{}
{
(<VIRGULA> Tipo() <ID> ListaArg_())?
}